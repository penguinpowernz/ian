#!/usr/bin/env ruby

require 'slop'
require 'logger'
require 'ian'

IAN_DIR = Dir.pwd

def initialized?
  File.directory?("#{IAN_DIR}/DEBIAN") and
  File.exist?("#{IAN_DIR}/DEBIAN/control")
end

def check_initialized!
  abort "ERROR: Not initialized" unless initialized?
end

log = Logger.new(STDOUT)

Slop.parse help: true do

  on :v, "Print the version" do
    puts "Version %s" % [Ian::VERSION]
    puts "In memory of Ian Ashley Murdock (1973 - 2015)"
    exit
  end

  command :new do
    description "Create a new Debian package from scratch"

    run do |opts, args|
      name = args.first

      if name.nil?
        abort "Must provide name as the first argument"
      end

      if File.directory?(name)
        abort "Directory '#{name}' exists"
      end

      Ian.create(name, log)
    end
  end


  command :init do
    description "Initialize the current folder as a Debian package"

    run do |opts, args|
      abort "Already initialized." if initialized?
      Ian.init(IAN_DIR, log)
    end
  end

  command :build do
    description "Run the script at DEBIAN/build"

    run do |opts, args|
      c   = Ian.control(IAN_DIR)
      build_script = File.join(Ian.debpath(IAN_DIR), "build")
      abort "no such script: #{build_script}" unless File.exist?(build_script)
      abort "not executable: #{build_script}" unless File.executable?(build_script)

      cmd = "#{build_script} \"#{IAN_DIR}\" \"#{c[:version]}\" \"#{c[:arch]}\" "
      log.debug "Running build script: #{cmd}"

      system cmd

      if !$?.success?
        log.fatal "Script exited with status #{$?.exitstatus}"
        exit $?.exitstatus
      end
    end
  end

  command :pkg do
    description "Build a Debian package"

    on :b, :build, "Run the build script prior to packaging"
    on :p, :path,  "Output only the path to the package"

    run do |opts, args|
      check_initialized!

      if opts.path?
        log.level = Logger::FATAL
      end

      if opts.build?
        system "#{$0} build"
        exit $?.exitstatus unless $?.success?
      end

      pkg = Ian.build_package(IAN_DIR, log)
      log.info "Package built to #{pkg}"

      if opts.path?
        puts pkg
      end
    end
  end

  command :install do
    description "Build and install a Debian package"
    on :b, :build, "Run the build script prior to packaging"

    run do |opts, args|
      check_initialized!

      if opts.build?
        system "#{$0} build"
        exit $?.exitstatus unless $?.success?
      end

      pkg = Ian.build_package(IAN_DIR, log)
      log.info "Package built to #{pkg}"

      system "sudo dpkg -i #{pkg}"
    end
  end

  command :push do
    description "Push the latest debian package up"

    run do |opts, args|
      check_initialized!
      if !File.exist? ".ianpush"
        puts "You need to specify a command to run in a file called .ianpush"
        exit 1
      end

      cmds = File.read(File.join(IAN_DIR, ".ianpush")).lines.map {|l| l.chomp }
      c   = Ian.control(IAN_DIR)

      if args.first
        cmds.map! {|cmd| cmd += " "+args.first }
      else
        fn = c.pkgname+".deb"
        path = File.join(IAN_DIR, "pkg", fn)
        abort "Package not yet built: #{fn}" unless File.exist?(path)
        cmds.map! {|cmd| cmd += " "+ path }
      end

      cmds.each do |cmd|
        system cmd
      end
    end
  end

  command :set do
    description "Modify the Debian control file"

    on :v, :version=,   "Change the version"
    on :a, :arch=,      "Change the architecture"

    run do |opts, args|
      check_initialized!

      c = Ian.control(IAN_DIR)
      opts = opts.to_hash.reject! {|k,v| v.nil? }
      c.update(opts)
      Ian::Control.save(c, Ian.ctrlpath(IAN_DIR))
      puts "Updated control file"
    end
  end

  command :info do
    description "Print information for this package"

    on :v, :version, "Show just the version of this package"
    on :a, :arch,    "Show just the architecture of this package"

    run do |opts, args|
      check_initialized!

      c = Ian.control(IAN_DIR)
      case
      when opts.version?
        puts c[:version]
      when opts.arch?
        puts c[:arch]
      else
        puts c
      end

      unless c.valid?
        puts "\n"
        log.warn "Control file is not valid, missing mandatory fields: %s" % c.missing_mandatory_fields
      end
    end
  end

  command :deps do
    description "Print dependencies for this package"

    run do |opts, args|
      check_initialized!

      ctrl = Ian.control(IAN_DIR)
      ctrl[:depends].each do |dep|
        puts dep
      end
    end
  end

  command :versions do
    description "Show all the known versions"

    run do |opts, args|
      check_initialized!

      %x[git tag].scan(/^v.*$/).each do |v|
        puts v
      end
    end
  end

  command :release do
    description "Release the current or new version"
    banner "Usage: ian release [version]\n\nBy omitting the version, the one in the control file will be used\n"

    run do |opts, args|
      check_initialized!

      ctrl = Ian.control(IAN_DIR)
      ctrlpath = Ian.ctrlpath(IAN_DIR)
      version = ctrl[:version]

      if args.any?
        version = args.first
        version = version.gsub(/^v/, '')
        log.info "Releasing v#{version}"
        log.info "Updating control file"
        ctrl[:version] = version
        Ian::Control.save(ctrl, ctrlpath)

        log.info "Committing control file"
        system "git add #{ctrlpath}"
        system "git commit -m 'releasing v#{version}'"

      end

      log.info "Tagging v#{version}"
      system "git tag v#{version}"

      pkg = Ian.build_package(IAN_DIR, log)
      log.info "Package built to #{pkg}"
    end
  end

end
